{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\awesome_app\\\\src\\\\index.js\";\n/*old way to write\nreact and react-dom are modules\nvar React=require('react');\nvar ReactDOM=require('react-dom');*/\n//new way to write   and babel convert this advance javascript code  into browser specific javascript\n//babel basically like a trans-compiler\n/*\n//react module helps in to write jsx\nimport React from 'react';\n//react-dom module helps in dom manipulation\nimport ReactDOM from 'react-dom';\n//<h1>HELLO WOELD</h1> is not html,is basically jsx(javascript extension) which is also converted to html by babel\nReactDOM.render(<h1>HELLO WORLD!</h1>,document.querySelector('#root'));*/\n\n// let React=require('react');\n// let ReactDom=require('react-dom');\n// ReactDom.render(React.createElement(\"h1\",null,\"this is ritik\"),document.querySelector('#root'));\n//so we can say react module is used for javascript extension (jsx)\n\n//render function takes only one element so if we have to use more than one element we use div\n// ReactDom.render(\n//     <div>\n//         <h1>this is nikhil</h1>\n//         <p>this is my mom</p>\n//         <h2>this is my father</h2>\n//     </div>,document.querySelector('#root')\n\n// )\n\n//we can also do same thing without help of div by using array\n// import React from 'react';\n// import ReactDom from 'react-dom';\n// ReactDom.render(\n//     [\n//         <h1>this is baadshah</h1>,\n//         <h2>you are my hero</h2>,\n//         <h3>you are great</h3>\n//     ],\n//     document.querySelector('#root')\n\n// )\n\n// let h1=document.createElement(\"h1\");\n// h1.innerText=\"hello brother\";\n// let parent=document.querySelector('#root');\n// parent.appendChild(h1);\n\n//React fragment\n//basically when we use like this\n/*ReactDom.render(\n    //     <div>\n    //         <h1>this is nikhil</h1>\n    //         <p>this is my mom</p>\n    //         <h2>this is my father</h2>\n    //     </div>,document.querySelector('#root')\n    \n    // )*/\n// and check in console that code \n/* basically create another div inside the <div class=\"root\"> which is not preferrable when we use css but it doesn't occur while using as array\nwe can also remove this problem by using React.fragment*/\n//    import React from 'react';\n// import ReactDom from 'react-dom';\n// ReactDom.render(\n//     <React.Fragment>\n//         <h1>this is baadshah</h1>\n//         <h2>you are my hero</h2>\n//         <h3>you are great</h3>\n//         </React.Fragment> ,\n//     document.querySelector('#root')\n\n// )\n\n//we can also use short syntax of React.Fragment i.e <>,</>\n\n// import React from 'react';\n// import ReactDom from 'react-dom';\n// ReactDom.render(\n//     <>\n//         <h1>this is baadshah</h1>\n//         <h2>you are my hero</h2>\n//         <h3>you are great</h3>\n//         </> ,\n//     document.querySelector('#root')\n\n// )\n\n/*practice \nimport React from 'react';\nimport ReactDom from 'react-dom';\nReactDom.render(\n    <>\n        <h1>This are my best movies</h1>\n         <ol type=\"a\">\n            <li>SALAAR</li>\n            <li>KGF</li>\n            <li>NARUTO</li>\n         </ol>\n    </>,document.querySelector('#root')\n)*/\n\n//how to use javascript expressions in jsx\n//basiaclly we are in the js file and using react we able to write html or jsx inside js but if we have to use js inside jsx we use curly braces { }\n//we can only use expressions(operator+operand) because expression returns value directly\n//but we can't use statements ,because it first check then gives result\n/*it gives error because we use statemnet\n<h3>you are {\n    if(3>2){\n    console.log(\"hyy\")}\n    else{\n        console.log(\"byy\")\n    }\n}</h3>*/\n\n/*import React from 'react';\nimport ReactDom from 'react-dom';\nlet ritik=\"handosme\";\nReactDom.render(\n    <>\n    <h1>Ritik is a {ritik} boy</h1>\n    <h2>2+2 is equal to {2+2}</h2>\n    <h3>random no between 0 and 1 is {Math.random()}</h3>\n   \n\n\n    </>,document.querySelector('#root')\n)*/\n\n/*template literals in react\n\nlet React=require('react');\nlet ReactDom=require('react-dom');\nlet fname=\"Ritik\";\nlet lname=\"chand\";\n//ReactDom.render(<h1>MY FIRST NAME IS {fname} AND MY LAST NAME IS {lname}</h1>,document.querySelector('#root'));\n//we can do similar thing by using template literals\n//in template literal we use backtic and dollar\n//for example-console.log(`hello ${fname}`)\n//ReactDom.render(<h1>{`MY FIRST NAME IS ${fname} AND LAST NAME IS ${lname}`}</h1>,document.querySelector('#root'));\n/*console.log is not an expression so it gives me error\nReactDom.render(<h1>{console.log(`my name is ${fname}`)}</h1>,document.querySelector('#root'));*/\n\n//DATE object in javascript\n/*using this object we can find current time and date\n\nlet date=new Date();\nconsole.log(date.getDate());\n\nconsole.log(date.getDay()); //it gives indexing value 0->sunday\nconsole.log(date.getMonth());//it also answer in indexing\nconsole.log(date.getFullYear());\nconsole.log(date.getTime());\nconsole.log(date.getMinutes());\nconsole.log(date.toLocaleDateString())//to write date in string form like 30/12/2023\nconsole.log(date.toLocaleTimeString());//1:33:31 pm\n\nimport React from 'react';\nimport ReactDom from 'react-dom';\nlet date=new Date();\nReactDom.render(<>\n    <h1>current date is {date.toLocaleDateString()}</h1>\n    <h1>current time is {date.toLocaleTimeString()}</h1>\n</>,document.querySelector('#root'));*/\n\n/*How to use ATTRIBUTES in JSX\nimport React from 'react';\nimport ReactDom from 'react-dom';\nlet url=\"https://i.pinimg.com/originals/f6/a5/65/f6a565da14074f0e06885afa7c6b7c4d.jpg\";\nlet google_link=\"https://www.google.com/\";\n\nReactDom.render(\n    <>\n        <h1>Welcome in my galery</h1>\n        <a href=\"https://www.google.com/\" target=\"_blank\">\n        <img src=\"https://i.pinimg.com/originals/f6/a5/65/f6a565da14074f0e06885afa7c6b7c4d.jpg\" alt=\"images\"/></a>\n        <img src={url} alt=\"images\"/>\n    </>,document.querySelector('#root')\n)*/\n\n//ADD CSS INTO REACT\n\n//EXTERNAL CSS\n//here we use className atrribute istead of class because class is a reserve kwyword in React\nimport './index.css';\nReactDom.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    className: \"heading\",\n    children: \"my name is ritik\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"line\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 1\n  }, this)]\n}, void 0, true), document.querySelector('#root'));\n\n//INLINE CSS \n//inline css we used by using objects\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst heading = {\n  //covert all kewab case(hypen )into camel case\n  textAlign: 'center',\n  /*text-transform capitalize,make first letter capital of each word\n  text-transform:capitalize;\n  /* text-transform-horizontal distance in right from text, vertical distance in down from text,blur,shadow color*/\n  textShadow: '2px -2px 2px grey'\n  /* margin:auto basically center the element within its parent element */\n};\nconst line = {\n  height: '2px',\n  backgroundImage: 'linear-gradient(to right,black 0%,gold 20%,orange 60%,gold 100%,black 1%)'\n};\nReactDom.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    style: heading,\n    children: \"my name is ritik\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    style: line\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 9\n  }, this)]\n}, void 0, true), document.querySelector('#root'));","map":{"version":3,"names":["ReactDom","render","_jsxDEV","_Fragment","children","className","fileName","_jsxFileName","lineNumber","columnNumber","document","querySelector","React","jsxDEV","Fragment","heading","textAlign","textShadow","line","height","backgroundImage","style"],"sources":["D:/React/awesome_app/src/index.js"],"sourcesContent":["/*old way to write\nreact and react-dom are modules\nvar React=require('react');\nvar ReactDOM=require('react-dom');*/\n//new way to write   and babel convert this advance javascript code  into browser specific javascript\n//babel basically like a trans-compiler\n/*\n//react module helps in to write jsx\nimport React from 'react';\n//react-dom module helps in dom manipulation\nimport ReactDOM from 'react-dom';\n//<h1>HELLO WOELD</h1> is not html,is basically jsx(javascript extension) which is also converted to html by babel\nReactDOM.render(<h1>HELLO WORLD!</h1>,document.querySelector('#root'));*/\n\n// let React=require('react');\n// let ReactDom=require('react-dom');\n// ReactDom.render(React.createElement(\"h1\",null,\"this is ritik\"),document.querySelector('#root'));\n//so we can say react module is used for javascript extension (jsx)\n\n\n//render function takes only one element so if we have to use more than one element we use div\n// ReactDom.render(\n//     <div>\n//         <h1>this is nikhil</h1>\n//         <p>this is my mom</p>\n//         <h2>this is my father</h2>\n//     </div>,document.querySelector('#root')\n\n// )\n\n//we can also do same thing without help of div by using array\n// import React from 'react';\n// import ReactDom from 'react-dom';\n// ReactDom.render(\n//     [\n//         <h1>this is baadshah</h1>,\n//         <h2>you are my hero</h2>,\n//         <h3>you are great</h3>\n//     ],\n//     document.querySelector('#root')\n    \n// )\n\n// let h1=document.createElement(\"h1\");\n// h1.innerText=\"hello brother\";\n// let parent=document.querySelector('#root');\n// parent.appendChild(h1);\n\n\n//React fragment\n//basically when we use like this\n/*ReactDom.render(\n    //     <div>\n    //         <h1>this is nikhil</h1>\n    //         <p>this is my mom</p>\n    //         <h2>this is my father</h2>\n    //     </div>,document.querySelector('#root')\n    \n    // )*/\n   // and check in console that code \n   /* basically create another div inside the <div class=\"root\"> which is not preferrable when we use css but it doesn't occur while using as array\n   we can also remove this problem by using React.fragment*/\n//    import React from 'react';\n// import ReactDom from 'react-dom';\n// ReactDom.render(\n//     <React.Fragment>\n//         <h1>this is baadshah</h1>\n//         <h2>you are my hero</h2>\n//         <h3>you are great</h3>\n//         </React.Fragment> ,\n//     document.querySelector('#root')\n    \n// )\n\n//we can also use short syntax of React.Fragment i.e <>,</>\n\n// import React from 'react';\n// import ReactDom from 'react-dom';\n// ReactDom.render(\n//     <>\n//         <h1>this is baadshah</h1>\n//         <h2>you are my hero</h2>\n//         <h3>you are great</h3>\n//         </> ,\n//     document.querySelector('#root')\n    \n// )\n\n\n/*practice \nimport React from 'react';\nimport ReactDom from 'react-dom';\nReactDom.render(\n    <>\n        <h1>This are my best movies</h1>\n         <ol type=\"a\">\n            <li>SALAAR</li>\n            <li>KGF</li>\n            <li>NARUTO</li>\n         </ol>\n    </>,document.querySelector('#root')\n)*/\n\n\n\n\n//how to use javascript expressions in jsx\n//basiaclly we are in the js file and using react we able to write html or jsx inside js but if we have to use js inside jsx we use curly braces { }\n//we can only use expressions(operator+operand) because expression returns value directly\n//but we can't use statements ,because it first check then gives result\n/*it gives error because we use statemnet\n<h3>you are {\n    if(3>2){\n    console.log(\"hyy\")}\n    else{\n        console.log(\"byy\")\n    }\n}</h3>*/\n\n/*import React from 'react';\nimport ReactDom from 'react-dom';\nlet ritik=\"handosme\";\nReactDom.render(\n    <>\n    <h1>Ritik is a {ritik} boy</h1>\n    <h2>2+2 is equal to {2+2}</h2>\n    <h3>random no between 0 and 1 is {Math.random()}</h3>\n   \n\n\n    </>,document.querySelector('#root')\n)*/\n\n\n\n/*template literals in react\n\nlet React=require('react');\nlet ReactDom=require('react-dom');\nlet fname=\"Ritik\";\nlet lname=\"chand\";\n//ReactDom.render(<h1>MY FIRST NAME IS {fname} AND MY LAST NAME IS {lname}</h1>,document.querySelector('#root'));\n//we can do similar thing by using template literals\n//in template literal we use backtic and dollar\n//for example-console.log(`hello ${fname}`)\n//ReactDom.render(<h1>{`MY FIRST NAME IS ${fname} AND LAST NAME IS ${lname}`}</h1>,document.querySelector('#root'));\n/*console.log is not an expression so it gives me error\nReactDom.render(<h1>{console.log(`my name is ${fname}`)}</h1>,document.querySelector('#root'));*/\n\n\n//DATE object in javascript\n/*using this object we can find current time and date\n\nlet date=new Date();\nconsole.log(date.getDate());\n\nconsole.log(date.getDay()); //it gives indexing value 0->sunday\nconsole.log(date.getMonth());//it also answer in indexing\nconsole.log(date.getFullYear());\nconsole.log(date.getTime());\nconsole.log(date.getMinutes());\nconsole.log(date.toLocaleDateString())//to write date in string form like 30/12/2023\nconsole.log(date.toLocaleTimeString());//1:33:31 pm\n\nimport React from 'react';\nimport ReactDom from 'react-dom';\nlet date=new Date();\nReactDom.render(<>\n    <h1>current date is {date.toLocaleDateString()}</h1>\n    <h1>current time is {date.toLocaleTimeString()}</h1>\n</>,document.querySelector('#root'));*/\n\n\n\n/*How to use ATTRIBUTES in JSX\nimport React from 'react';\nimport ReactDom from 'react-dom';\nlet url=\"https://i.pinimg.com/originals/f6/a5/65/f6a565da14074f0e06885afa7c6b7c4d.jpg\";\nlet google_link=\"https://www.google.com/\";\n\nReactDom.render(\n    <>\n        <h1>Welcome in my galery</h1>\n        <a href=\"https://www.google.com/\" target=\"_blank\">\n        <img src=\"https://i.pinimg.com/originals/f6/a5/65/f6a565da14074f0e06885afa7c6b7c4d.jpg\" alt=\"images\"/></a>\n        <img src={url} alt=\"images\"/>\n    </>,document.querySelector('#root')\n)*/\n\n//ADD CSS INTO REACT\n\n//EXTERNAL CSS\n//here we use className atrribute istead of class because class is a reserve kwyword in React\nimport './index.css';\nReactDom.render(\n    <>\n<h1 className=\"heading\">my name is ritik</h1>\n<div className=\"line\">\n\n</div>\n</>\n,document.querySelector('#root'));\n\n//INLINE CSS \n//inline css we used by using objects\nimport React from 'react';\nimport ReactDom from 'react-dom';\nconst heading={\n//covert all kewab case(hypen )into camel case\n        textAlign:'center', \n        /*text-transform capitalize,make first letter capital of each word\n        text-transform:capitalize;\n        /* text-transform-horizontal distance in right from text, vertical distance in down from text,blur,shadow color*/\n        textShadow:'2px -2px 2px grey',\n        /* margin:auto basically center the element within its parent element */\n        \n        \n      }\n\n      const line={\n    \n            height:'2px',\n            backgroundImage:'linear-gradient(to right,black 0%,gold 20%,orange 60%,gold 100%,black 1%)',\n          }\n          ReactDom.render(\n            <>\n        <h1 style={heading}>my name is ritik</h1>\n        <div style={line}>\n        \n        </div>\n        </>\n        ,document.querySelector('#root'));\n      \n\n    \n\n\n\n\n\n\n\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;AACA;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,OAAO,aAAa;AACpBA,QAAQ,CAACC,MAAM,eACXC,OAAA,CAAAC,SAAA;EAAAC,QAAA,gBACJF,OAAA;IAAIG,SAAS,EAAC,SAAS;IAAAD,QAAA,EAAC;EAAgB;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC,eAC7CP,OAAA;IAAKG,SAAS,EAAC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEhB,CAAC;AAAA,eACJ,CAAC,EACFC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC,CAAC;;AAEjC;AACA;AACA,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOZ,QAAQ,MAAM,WAAW;AAAC,SAAAa,MAAA,IAAAX,OAAA;AAAA,SAAAY,QAAA,IAAAX,SAAA;AACjC,MAAMY,OAAO,GAAC;EACd;EACQC,SAAS,EAAC,QAAQ;EAClB;AACR;AACA;EACQC,UAAU,EAAC;EACX;AAGF,CAAC;AAED,MAAMC,IAAI,GAAC;EAELC,MAAM,EAAC,KAAK;EACZC,eAAe,EAAC;AAClB,CAAC;AACDpB,QAAQ,CAACC,MAAM,eACbC,OAAA,CAAAC,SAAA;EAAAC,QAAA,gBACJF,OAAA;IAAImB,KAAK,EAAEN,OAAQ;IAAAX,QAAA,EAAC;EAAgB;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC,eACzCP,OAAA;IAAKmB,KAAK,EAAEH;EAAK;IAAAZ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEZ,CAAC;AAAA,eACJ,CAAC,EACFC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\awesome_app\\\\src\\\\Submission.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport './styles.css';\nimport { useState, useEffect } from 'react';\nimport PieChartComponent from './Piechart.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Submission(props) {\n  _s();\n  const handle = props.data;\n  const [accepted, setaccepted] = useState(0);\n  const [tle, settle] = useState(0);\n  const [wrong, setwrong] = useState(0);\n  const [run, setrun] = useState(0);\n  const [mpp, setMpp] = useState(new Map());\n  const [mp, setmp] = useState(new Map());\n  useEffect(() => {\n    if (handle !== \"\") {\n      const api = `https://codeforces.com/api/user.status?handle=${handle}`;\n      async function fetchdata() {\n        try {\n          const ele = await fetch(api);\n          if (ele.ok) {\n            const ele_data = await ele.json();\n            if (ele_data) {\n              ele_data.result.forEach(data => {\n                let programming_language = data.programmingLanguage;\n                let verdict = data.verdict;\n                setmp(prevmp => {\n                  const updatedmp = new Map(prevmp);\n                  const current_count = updatedmp.get(programming_language) || 0;\n                  updatedmp.set(programming_language, current_count + 1);\n                  return updatedmp;\n                });\n                if (verdict === \"OK\") {\n                  setaccepted(prev => prev + 1);\n                } else if (verdict === \"TIME_LIMIT_EXCEEDED\") {\n                  settle(prev => prev + 1);\n                } else if (verdict === \"RUNTIME_ERROR\") {\n                  setrun(prev => prev + 1);\n                } else if (verdict === \"WRONG_ANSWER\") {\n                  setwrong(prev => prev + 1);\n                }\n                data.problem.tags.forEach(value => {\n                  setMpp(prevMap => {\n                    const updatedMap = new Map(prevMap);\n                    const currentCount = updatedMap.get(value) || 0;\n                    updatedMap.set(value, currentCount + 1);\n                    return updatedMap;\n                  });\n                });\n              });\n            }\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n      fetchdata();\n    }\n  }, [handle]);\n  const programming = [];\n  const programming_values = [];\n  mp.forEach((value, index) => {\n    programming.push(index);\n    programming_values.push(value);\n  });\n  const problem = [];\n  const problem_count = [];\n  mpp.forEach(value, index);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outer-pi\",\n      children: [/*#__PURE__*/_jsxDEV(PieChartComponent, {\n        label: [\"TLE\", \"AC\", \"WA\", \"RE\"],\n        data: [tle, accepted, wrong, run]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(PieChartComponent, {\n        label: programming,\n        data: programming_values\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Submission, \"ciNPVXs8y1hiMk9VEdU/a5KlE2o=\");\n_c = Submission;\nvar _c;\n$RefreshReg$(_c, \"Submission\");","map":{"version":3,"names":["React","ReactDom","useState","useEffect","PieChartComponent","jsxDEV","_jsxDEV","Fragment","_Fragment","Submission","props","_s","handle","data","accepted","setaccepted","tle","settle","wrong","setwrong","run","setrun","mpp","setMpp","Map","mp","setmp","api","fetchdata","ele","fetch","ok","ele_data","json","result","forEach","programming_language","programmingLanguage","verdict","prevmp","updatedmp","current_count","get","set","prev","problem","tags","value","prevMap","updatedMap","currentCount","err","console","log","programming","programming_values","index","push","problem_count","children","className","label","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React/awesome_app/src/Submission.jsx"],"sourcesContent":["import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport './styles.css';\r\nimport {useState,useEffect} from 'react';\r\nimport PieChartComponent from './Piechart.jsx';\r\n\r\nexport default function Submission(props){\r\n    const handle=props.data;\r\n\r\n \r\n  \r\n        const [accepted,setaccepted]=useState(0);\r\n        const [tle,settle]=useState(0);\r\n        const [wrong,setwrong]=useState(0);\r\n        const [run,setrun]=useState(0);\r\n        const [mpp, setMpp] = useState(new Map())\r\n        const[mp,setmp]=useState(new Map());\r\n        useEffect(()=>{\r\n            if(handle!==\"\"){\r\n            const api=`https://codeforces.com/api/user.status?handle=${handle}`;\r\n            async function fetchdata(){\r\n                try{\r\n               const ele=await fetch(api);\r\n               if(ele.ok){\r\n                  const ele_data=await ele.json();\r\n                  if(ele_data){\r\n                    ele_data.result.forEach((data)=>{\r\n                        let programming_language=data.programmingLanguage;\r\n                        let verdict=data.verdict;\r\n                        setmp((prevmp)=>{\r\n                            const updatedmp=new Map(prevmp);\r\n                           const current_count=updatedmp.get(programming_language)||0;\r\n                           updatedmp.set(programming_language,current_count+1);\r\n                            return updatedmp;\r\n                        })\r\n                       \r\n                        if(verdict===\"OK\"){\r\n                            setaccepted((prev)=>prev+1);\r\n                        }\r\n                        else if(verdict===\"TIME_LIMIT_EXCEEDED\"){\r\n                            settle((prev)=>prev+1);\r\n                        }\r\n                        else if(verdict===\"RUNTIME_ERROR\"){\r\n                            setrun((prev)=>prev+1);\r\n                        }\r\n                        else if(verdict===\"WRONG_ANSWER\"){\r\n                            setwrong((prev)=>prev+1);\r\n                        }\r\n                        data.problem.tags.forEach((value)=>{\r\n                            setMpp((prevMap) => {\r\n                                const updatedMap = new Map(prevMap);\r\n                                const currentCount = updatedMap.get(value) || 0;\r\n                                updatedMap.set(value, currentCount + 1);\r\n                                return updatedMap;\r\n                            });\r\n                        })\r\n\r\n                    });\r\n                  }\r\n               }\r\n            }catch(err){\r\n                console.log(err);\r\n            }\r\n            }\r\n            fetchdata();\r\n        }\r\n        },[handle]);\r\n\r\n         const programming=[];\r\n         const programming_values=[];\r\n        mp.forEach((value,index)=>{\r\n           programming.push(index);\r\n           programming_values.push(value);\r\n        });\r\n\r\n        const problem=[];\r\n        const problem_count=[];\r\n        mpp.forEach(value,index)\r\n\r\n        \r\n       \r\n        return(\r\n            <>\r\n            <div className=\"outer-pi\">\r\n           <PieChartComponent label={[\"TLE\",\"AC\",\"WA\",\"RE\"]}data={[tle,accepted,wrong,run]}></PieChartComponent>\r\n           <PieChartComponent label={programming}data={programming_values}></PieChartComponent>\r\n           </div>\r\n           </>\r\n        )\r\n\r\n    }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
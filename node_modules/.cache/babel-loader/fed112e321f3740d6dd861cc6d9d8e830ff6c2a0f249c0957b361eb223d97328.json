{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\awesome_app\\\\src\\\\index.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/*old way to write\nreact and react-dom are modules\nvar React=require('react');\nvar ReactDOM=require('react-dom');*/\n//new way to write   and babel convert this advance javascript code  into browser specific javascript\n//babel basically like a trans-compiler\n/*\n//react module helps in to write jsx\nimport React from 'react';\n//react-dom module helps in dom manipulation\nimport ReactDOM from 'react-dom';\n//<h1>HELLO WOELD</h1> is not html,is basically jsx(javascript extension) which is also converted to html by babel\nReactDOM.render(<h1>HELLO WORLD!</h1>,document.querySelector('#root'));*/\n\n// let React=require('react');\n// let ReactDom=require('react-dom');\n// ReactDom.render(React.createElement(\"h1\",null,\"this is ritik\"),document.querySelector('#root'));\n//so we can say react module is used for javascript extension (jsx)\n\n//render function takes only one element so if we have to use more than one element we use div\n// ReactDom.render(\n//     <div>\n//         <h1>this is nikhil</h1>\n//         <p>this is my mom</p>\n//         <h2>this is my father</h2>\n//     </div>,document.querySelector('#root')\n\n// )\n\n//we can also do same thing without help of div by using array\n// import React from 'react';\n// import ReactDom from 'react-dom';\n// ReactDom.render(\n//     [\n//         <h1>this is baadshah</h1>,\n//         <h2>you are my hero</h2>,\n//         <h3>you are great</h3>\n//     ],\n//     document.querySelector('#root')\n\n// )\n\n// let h1=document.createElement(\"h1\");\n// h1.innerText=\"hello brother\";\n// let parent=document.querySelector('#root');\n// parent.appendChild(h1);\n\n//React fragment\n//basically when we use like this\n/*ReactDom.render(\n    //     <div>\n    //         <h1>this is nikhil</h1>\n    //         <p>this is my mom</p>\n    //         <h2>this is my father</h2>\n    //     </div>,document.querySelector('#root')\n    \n    // )*/\n// and check in console that code \n/* basically create another div inside the <div class=\"root\"> which is not preferrable when we use css but it doesn't occur while using as array\nwe can also remove this problem by using React.fragment*/\n//    import React from 'react';\n// import ReactDom from 'react-dom';\n// ReactDom.render(\n//     <React.Fragment>\n//         <h1>this is baadshah</h1>\n//         <h2>you are my hero</h2>\n//         <h3>you are great</h3>\n//         </React.Fragment> ,\n//     document.querySelector('#root')\n\n// )\n\n//we can also use short syntax of React.Fragment i.e <>,</>\n\n// import React from 'react';\n// import ReactDom from 'react-dom';\n// ReactDom.render(\n//     <>\n//         <h1>this is baadshah</h1>\n//         <h2>you are my hero</h2>\n//         <h3>you are great</h3>\n//         </> ,\n//     document.querySelector('#root')\n\n// )\n\n/*practice \nimport React from 'react';\nimport ReactDom from 'react-dom';\nReactDom.render(\n    <>\n        <h1>This are my best movies</h1>\n         <ol type=\"a\">\n            <li>SALAAR</li>\n            <li>KGF</li>\n            <li>NARUTO</li>\n         </ol>\n    </>,document.querySelector('#root')\n)*/\n\n//how to use javascript expressions in jsx\n//basiaclly we are in the js file and using react we able to write html or jsx inside js but if we have to use js inside jsx we use curly braces { }\n//we can only use expressions(operator+operand) because expression returns value directly\n//but we can't use statements ,because it first check then gives result\n/*it gives error because we use statemnet\n<h3>you are {\n    if(3>2){\n    console.log(\"hyy\")}\n    else{\n        console.log(\"byy\")\n    }\n}</h3>*/\n\n/*import React from 'react';\nimport ReactDom from 'react-dom';\nlet ritik=\"handosme\";\nReactDom.render(\n    <>\n    <h1>Ritik is a {ritik} boy</h1>\n    <h2>2+2 is equal to {2+2}</h2>\n    <h3>random no between 0 and 1 is {Math.random()}</h3>\n   \n\n\n    </>,document.querySelector('#root')\n)*/\n\n//template literals in react\n\nlet React = require('react');\nlet ReactDom = require('react-dom');\nlet fname = \"Ritik\";\nlet lname = \"chand\";\nReactDom.render( /*#__PURE__*/_jsxDEV(\"h1\", {\n  children: [\"MY FIRST NAME IS \", fname, \" AND MY LAST NAME IS \", lname]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 142,\n  columnNumber: 17\n}, this), document.querySelector('#root'));\n//we can do similar thing by using template literals\nReactDom.render( /*#__PURE__*/_jsxDEV(\"h1\", {\n  children: [\"MY FIRST NAME IS $\", fname, \" AND LAST NAME IS $\", lname]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 144,\n  columnNumber: 17\n}, this));","map":{"version":3,"names":["React","require","ReactDom","fname","lname","render","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","document","querySelector"],"sources":["D:/React/awesome_app/src/index.js"],"sourcesContent":["/*old way to write\nreact and react-dom are modules\nvar React=require('react');\nvar ReactDOM=require('react-dom');*/\n//new way to write   and babel convert this advance javascript code  into browser specific javascript\n//babel basically like a trans-compiler\n/*\n//react module helps in to write jsx\nimport React from 'react';\n//react-dom module helps in dom manipulation\nimport ReactDOM from 'react-dom';\n//<h1>HELLO WOELD</h1> is not html,is basically jsx(javascript extension) which is also converted to html by babel\nReactDOM.render(<h1>HELLO WORLD!</h1>,document.querySelector('#root'));*/\n\n// let React=require('react');\n// let ReactDom=require('react-dom');\n// ReactDom.render(React.createElement(\"h1\",null,\"this is ritik\"),document.querySelector('#root'));\n//so we can say react module is used for javascript extension (jsx)\n\n\n//render function takes only one element so if we have to use more than one element we use div\n// ReactDom.render(\n//     <div>\n//         <h1>this is nikhil</h1>\n//         <p>this is my mom</p>\n//         <h2>this is my father</h2>\n//     </div>,document.querySelector('#root')\n\n// )\n\n//we can also do same thing without help of div by using array\n// import React from 'react';\n// import ReactDom from 'react-dom';\n// ReactDom.render(\n//     [\n//         <h1>this is baadshah</h1>,\n//         <h2>you are my hero</h2>,\n//         <h3>you are great</h3>\n//     ],\n//     document.querySelector('#root')\n    \n// )\n\n// let h1=document.createElement(\"h1\");\n// h1.innerText=\"hello brother\";\n// let parent=document.querySelector('#root');\n// parent.appendChild(h1);\n\n\n//React fragment\n//basically when we use like this\n/*ReactDom.render(\n    //     <div>\n    //         <h1>this is nikhil</h1>\n    //         <p>this is my mom</p>\n    //         <h2>this is my father</h2>\n    //     </div>,document.querySelector('#root')\n    \n    // )*/\n   // and check in console that code \n   /* basically create another div inside the <div class=\"root\"> which is not preferrable when we use css but it doesn't occur while using as array\n   we can also remove this problem by using React.fragment*/\n//    import React from 'react';\n// import ReactDom from 'react-dom';\n// ReactDom.render(\n//     <React.Fragment>\n//         <h1>this is baadshah</h1>\n//         <h2>you are my hero</h2>\n//         <h3>you are great</h3>\n//         </React.Fragment> ,\n//     document.querySelector('#root')\n    \n// )\n\n//we can also use short syntax of React.Fragment i.e <>,</>\n\n// import React from 'react';\n// import ReactDom from 'react-dom';\n// ReactDom.render(\n//     <>\n//         <h1>this is baadshah</h1>\n//         <h2>you are my hero</h2>\n//         <h3>you are great</h3>\n//         </> ,\n//     document.querySelector('#root')\n    \n// )\n\n\n/*practice \nimport React from 'react';\nimport ReactDom from 'react-dom';\nReactDom.render(\n    <>\n        <h1>This are my best movies</h1>\n         <ol type=\"a\">\n            <li>SALAAR</li>\n            <li>KGF</li>\n            <li>NARUTO</li>\n         </ol>\n    </>,document.querySelector('#root')\n)*/\n\n\n\n\n//how to use javascript expressions in jsx\n//basiaclly we are in the js file and using react we able to write html or jsx inside js but if we have to use js inside jsx we use curly braces { }\n//we can only use expressions(operator+operand) because expression returns value directly\n//but we can't use statements ,because it first check then gives result\n/*it gives error because we use statemnet\n<h3>you are {\n    if(3>2){\n    console.log(\"hyy\")}\n    else{\n        console.log(\"byy\")\n    }\n}</h3>*/\n\n/*import React from 'react';\nimport ReactDom from 'react-dom';\nlet ritik=\"handosme\";\nReactDom.render(\n    <>\n    <h1>Ritik is a {ritik} boy</h1>\n    <h2>2+2 is equal to {2+2}</h2>\n    <h3>random no between 0 and 1 is {Math.random()}</h3>\n   \n\n\n    </>,document.querySelector('#root')\n)*/\n\n\n\n//template literals in react\n\nlet React=require('react');\nlet ReactDom=require('react-dom');\nlet fname=\"Ritik\";\nlet lname=\"chand\";\nReactDom.render(<h1>MY FIRST NAME IS {fname} AND MY LAST NAME IS {lname}</h1>,document.querySelector('#root'));\n//we can do similar thing by using template literals\nReactDom.render(<h1>MY FIRST NAME IS ${fname} AND LAST NAME IS ${lname}</h1>)\n\n\n\n\n\n\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;AACA;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA,IAAIA,KAAK,GAACC,OAAO,CAAC,OAAO,CAAC;AAC1B,IAAIC,QAAQ,GAACD,OAAO,CAAC,WAAW,CAAC;AACjC,IAAIE,KAAK,GAAC,OAAO;AACjB,IAAIC,KAAK,GAAC,OAAO;AACjBF,QAAQ,CAACG,MAAM,eAACC,OAAA;EAAAC,QAAA,GAAI,mBAAiB,EAACJ,KAAK,EAAC,uBAAqB,EAACC,KAAK;AAAA;EAAAI,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAK,CAAC,EAACC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC,CAAC;AAC9G;AACAX,QAAQ,CAACG,MAAM,eAACC,OAAA;EAAAC,QAAA,GAAI,oBAAkB,EAACJ,KAAK,EAAC,qBAAmB,EAACC,KAAK;AAAA;EAAAI,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAK,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
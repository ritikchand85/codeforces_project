{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\awesome_app\\\\src\\\\Submission.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport './styles.css';\nimport { useState, useEffect } from 'react';\nimport PieChartComponent from './Piechart.jsx';\nimport LineChart from './Linechart.jsx';\nimport BarGraph from './Bargraph.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Submission(props) {\n  _s();\n  const handle = props.data;\n  const [accepted, setaccepted] = useState(0);\n  const [tle, settle] = useState(0);\n  const [wrong, setwrong] = useState(0);\n  const [run, setrun] = useState(0);\n  const [mpp, setMpp] = useState(new Map());\n  const [mp, setmp] = useState(new Map());\n  const [mrating, setmrating] = useState(new Set());\n  const [contest, setContest] = useState([]);\n  const [contestRating, setContestRating] = useState([]);\n  useEffect(() => {\n    setaccepted(0);\n    settle(0);\n    setwrong(0);\n    setrun(0);\n    setmp(new Map());\n    setMpp(new Map());\n    setmrating(new Set());\n    setContest([]);\n    setContestRating([]);\n    if (handle !== \"\") {\n      const api1 = `https://codeforces.com/api/user.status?handle=${handle}`;\n      async function fetchdata1() {\n        try {\n          const ele = await fetch(api1);\n          if (ele.ok) {\n            const ele_data = await ele.json();\n            if (ele_data) {\n              ele_data.result.forEach(data => {\n                let programming_language = data.programmingLanguage;\n                let verdict = data.verdict;\n                setmp(prevmp => {\n                  const updatedmp = new Map(prevmp);\n                  const current_count = updatedmp.get(programming_language) || 0;\n                  updatedmp.set(programming_language, current_count + 1);\n                  return updatedmp;\n                });\n                if (verdict === \"OK\") {\n                  setaccepted(prev => prev + 1);\n                } else if (verdict === \"TIME_LIMIT_EXCEEDED\") {\n                  settle(prev => prev + 1);\n                } else if (verdict === \"RUNTIME_ERROR\") {\n                  setrun(prev => prev + 1);\n                } else if (verdict === \"WRONG_ANSWER\") {\n                  setwrong(prev => prev + 1);\n                }\n                data.problem.tags.forEach(value => {\n                  setMpp(prevMap => {\n                    const updatedMap = new Map(prevMap);\n                    const currentCount = updatedMap.get(value) || 0;\n                    updatedMap.set(value, currentCount + 1);\n                    return updatedMap;\n                  });\n                });\n              });\n            }\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n      fetchdata1();\n      const api2 = `https://codeforces.com/api/user.rating?handle=${handle}`;\n      async function fetchdata2() {\n        try {\n          let ele = await fetch(api2);\n          if (ele.ok) {\n            let data = await ele.json();\n            if (data) {\n              let tempContest = [];\n              let tempContestRating = [];\n              data.result.forEach((value, index) => {\n                tempContest.push(index + 1);\n                tempContestRating.push(value.newRating);\n              });\n              setContest(tempContest);\n              setContestRating(tempContestRating);\n            }\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n      fetchdata2();\n    }\n  }, [handle]);\n  const programming = [];\n  const programming_values = [];\n  mp.forEach((value, index) => {\n    programming.push(index);\n    programming_values.push(value);\n  });\n  const problem = [];\n  const problem_count = [];\n  mpp.forEach((value, index) => {\n    problem.push(index);\n    problem_count.push(value);\n  });\n\n  // let c=1;\n\n  // mrating.forEach((value)=>{\n\n  //     contest.push(c);\n  //     c++;\n  // contestRating.push(value);\n  // })\n  // setContestRating(x);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outer-pi\",\n      children: [/*#__PURE__*/_jsxDEV(PieChartComponent, {\n        label: [\"TLE\", \"AC\", \"WA\", \"RE\"],\n        data: [tle, accepted, wrong, run],\n        text: \"Submissions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(PieChartComponent, {\n        label: programming,\n        data: programming_values,\n        text: \"Languages used:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"problem\",\n      children: /*#__PURE__*/_jsxDEV(BarGraph, {\n        labels: problem,\n        data: problem_count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rating\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        labels: contest,\n        data: contestRating,\n        handle: handle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true);\n}\n_s(Submission, \"Mka+YTfrrWVGNxOILxGmZF6B2nA=\");\n_c = Submission;\nvar _c;\n$RefreshReg$(_c, \"Submission\");","map":{"version":3,"names":["React","ReactDom","useState","useEffect","PieChartComponent","LineChart","BarGraph","jsxDEV","_jsxDEV","Fragment","_Fragment","Submission","props","_s","handle","data","accepted","setaccepted","tle","settle","wrong","setwrong","run","setrun","mpp","setMpp","Map","mp","setmp","mrating","setmrating","Set","contest","setContest","contestRating","setContestRating","api1","fetchdata1","ele","fetch","ok","ele_data","json","result","forEach","programming_language","programmingLanguage","verdict","prevmp","updatedmp","current_count","get","set","prev","problem","tags","value","prevMap","updatedMap","currentCount","err","console","log","api2","fetchdata2","tempContest","tempContestRating","index","push","newRating","programming","programming_values","problem_count","children","className","label","text","fileName","_jsxFileName","lineNumber","columnNumber","labels","_c","$RefreshReg$"],"sources":["D:/React/awesome_app/src/Submission.jsx"],"sourcesContent":["import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport './styles.css';\r\nimport {useState,useEffect} from 'react';\r\nimport PieChartComponent from './Piechart.jsx';\r\nimport LineChart from './Linechart.jsx';\r\nimport BarGraph from './Bargraph.jsx';\r\n\r\nexport default function Submission(props){\r\n    const handle=props.data;\r\n\r\n \r\n  \r\n        const [accepted,setaccepted]=useState(0);\r\n        const [tle,settle]=useState(0);\r\n        const [wrong,setwrong]=useState(0);\r\n        const [run,setrun]=useState(0);\r\n        const [mpp, setMpp] = useState(new Map())\r\n        const[mp,setmp]=useState(new Map());\r\n        const[mrating,setmrating]=useState(new Set());\r\n        const [contest, setContest] = useState([]);\r\n        const [contestRating, setContestRating] = useState([]);\r\n        useEffect(()=>{\r\n\r\n            setaccepted(0);\r\n            settle(0);\r\n            setwrong(0);\r\n            setrun(0);\r\n            setmp(new Map());\r\n            setMpp(new Map());\r\n            setmrating(new Set());\r\n            setContest([]);\r\n            setContestRating([]);\r\n           \r\n            if(handle!==\"\"){\r\n            const api1=`https://codeforces.com/api/user.status?handle=${handle}`;\r\n            async function fetchdata1(){\r\n                try{\r\n               const ele=await fetch(api1);\r\n               if(ele.ok){\r\n                  const ele_data=await ele.json();\r\n                  if(ele_data){\r\n                    ele_data.result.forEach((data)=>{\r\n                        let programming_language=data.programmingLanguage;\r\n                        let verdict=data.verdict;\r\n                        setmp((prevmp)=>{\r\n                            const updatedmp=new Map(prevmp);\r\n                           const current_count=updatedmp.get(programming_language)||0;\r\n                           updatedmp.set(programming_language,current_count+1);\r\n                            return updatedmp;\r\n                        })\r\n                       \r\n                        if(verdict===\"OK\"){\r\n                            setaccepted((prev)=>prev+1);\r\n                        }\r\n                        else if(verdict===\"TIME_LIMIT_EXCEEDED\"){\r\n                            settle((prev)=>prev+1);\r\n                        }\r\n                        else if(verdict===\"RUNTIME_ERROR\"){\r\n                            setrun((prev)=>prev+1);\r\n                        }\r\n                        else if(verdict===\"WRONG_ANSWER\"){\r\n                            setwrong((prev)=>prev+1);\r\n                        }\r\n                        data.problem.tags.forEach((value)=>{\r\n                            setMpp((prevMap) => {\r\n                                const updatedMap = new Map(prevMap);\r\n                                const currentCount = updatedMap.get(value) || 0;\r\n                                updatedMap.set(value, currentCount + 1);\r\n                                return updatedMap;\r\n                            });\r\n                        })\r\n\r\n                    });\r\n                  }\r\n               }\r\n            }catch(err){\r\n                console.log(err);\r\n            }\r\n            }\r\n            fetchdata1();\r\n            const api2=`https://codeforces.com/api/user.rating?handle=${handle}`;\r\n            async function fetchdata2(){\r\n                try{\r\n                    let ele=await fetch(api2);\r\n                    if(ele.ok){\r\n                        let data=await ele.json();\r\n                        if(data){\r\n                            let tempContest = [];\r\n                            let tempContestRating = [];\r\n                            data.result.forEach((value, index) => {\r\n                                tempContest.push(index + 1);\r\n                                tempContestRating.push(value.newRating);\r\n                            });\r\n                            setContest(tempContest);\r\n                            setContestRating(tempContestRating);\r\n                        }\r\n                    }\r\n                }catch(err){\r\n                    console.log(err);\r\n                }\r\n                \r\n            }\r\n            fetchdata2();\r\n           \r\n        }\r\n        },[handle]);\r\n\r\n         const programming=[];\r\n         const programming_values=[];\r\n        \r\n        mp.forEach((value,index)=>{\r\n           programming.push(index);\r\n           programming_values.push(value);\r\n        });\r\n\r\n        const problem=[];\r\n        const problem_count=[];\r\n        mpp.forEach((value,index)=>{\r\n             problem.push(index);\r\n             problem_count.push(value);\r\n        }\r\n\r\n            )\r\n           \r\n      \r\n            // let c=1;\r\n      \r\n            // mrating.forEach((value)=>{\r\n                \r\n            //     contest.push(c);\r\n            //     c++;\r\n            // contestRating.push(value);\r\n            // })\r\n            // setContestRating(x);\r\n    \r\n        \r\n       \r\n        return(\r\n            <>\r\n            <div className=\"outer-pi\">\r\n           <PieChartComponent label={[\"TLE\",\"AC\",\"WA\",\"RE\"]}data={[tle,accepted,wrong,run]} text='Submissions:'></PieChartComponent>\r\n           <PieChartComponent label={programming}data={programming_values} text='Languages used:'></PieChartComponent>\r\n           </div>\r\n           <div className=\"problem\">\r\n            <BarGraph labels={problem} data={problem_count}></BarGraph>\r\n           </div>\r\n           <div className=\"rating\">\r\n            <LineChart labels={contest} data={contestRating} handle={handle}></LineChart>\r\n           </div>\r\n           </>\r\n        )\r\n\r\n    }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
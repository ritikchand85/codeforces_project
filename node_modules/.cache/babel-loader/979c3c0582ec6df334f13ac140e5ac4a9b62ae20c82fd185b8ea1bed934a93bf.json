{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\awesome_app\\\\src\\\\index.js\";\n/*old way to write\nreact and react-dom are modules\nvar React=require('react');\nvar ReactDOM=require('react-dom');*/\n//new way to write   and babel convert this advance javascript code  into browser specific javascript\n//babel basically like a trans-compiler\n/*\n//react module helps in to write jsx\nimport React from 'react';\n//react-dom module helps in dom manipulation\nimport ReactDOM from 'react-dom';\n//<h1>HELLO WOELD</h1> is not html,is basically jsx(javascript extension) which is also converted to html by babel\nReactDOM.render(<h1>HELLO WORLD!</h1>,document.querySelector('#root'));*/\n\n// let React=require('react');\n// let ReactDom=require('react-dom');\n// ReactDom.render(React.createElement(\"h1\",null,\"this is ritik\"),document.querySelector('#root'));\n//so we can say react module is used for javascript extension (jsx)\n\n//render function takes only one element so if we have to use more than one element we use div\n// ReactDom.render(\n//     <div>\n//         <h1>this is nikhil</h1>\n//         <p>this is my mom</p>\n//         <h2>this is my father</h2>\n//     </div>,document.querySelector('#root')\n\n// )\n\n//we can also do same thing without help of div by using array\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nReactDom.render([/*#__PURE__*/_jsxDEV(\"h1\", {\n  children: \"this is baadshah\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 36,\n  columnNumber: 9\n}, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n  children: \"you are my hero\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 37,\n  columnNumber: 9\n}, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n  children: \"you are great\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 38,\n  columnNumber: 9\n}, this)], document.querySelector('#root'));\n\n// let h1=document.createElement(\"h1\");\n// h1.innerText=\"hello brother\";\n// let parent=document.querySelector('#root');\n// parent.appendChild(h1);\n\n//React fragment\n//basically when we use like this\n/*ReactDom.render(\n    //     <div>\n    //         <h1>this is nikhil</h1>\n    //         <p>this is my mom</p>\n    //         <h2>this is my father</h2>\n    //     </div>,document.querySelector('#root')\n    \n    // )*/\n// and check in console that code \n// basically create another div inside the <div class=\"root\"> which is not preferrable when we use css but it doesn't occur while using as array","map":{"version":3,"names":["React","ReactDom","jsxDEV","_jsxDEV","render","children","fileName","_jsxFileName","lineNumber","columnNumber","document","querySelector"],"sources":["D:/React/awesome_app/src/index.js"],"sourcesContent":["/*old way to write\nreact and react-dom are modules\nvar React=require('react');\nvar ReactDOM=require('react-dom');*/\n//new way to write   and babel convert this advance javascript code  into browser specific javascript\n//babel basically like a trans-compiler\n/*\n//react module helps in to write jsx\nimport React from 'react';\n//react-dom module helps in dom manipulation\nimport ReactDOM from 'react-dom';\n//<h1>HELLO WOELD</h1> is not html,is basically jsx(javascript extension) which is also converted to html by babel\nReactDOM.render(<h1>HELLO WORLD!</h1>,document.querySelector('#root'));*/\n\n// let React=require('react');\n// let ReactDom=require('react-dom');\n// ReactDom.render(React.createElement(\"h1\",null,\"this is ritik\"),document.querySelector('#root'));\n//so we can say react module is used for javascript extension (jsx)\n\n\n//render function takes only one element so if we have to use more than one element we use div\n// ReactDom.render(\n//     <div>\n//         <h1>this is nikhil</h1>\n//         <p>this is my mom</p>\n//         <h2>this is my father</h2>\n//     </div>,document.querySelector('#root')\n\n// )\n\n//we can also do same thing without help of div by using array\nimport React from 'react';\nimport ReactDom from 'react-dom'\nReactDom.render(\n    [\n        <h1>this is baadshah</h1>,\n        <h2>you are my hero</h2>,\n        <h3>you are great</h3>\n    ],\n    document.querySelector('#root')\n    \n)\n\n// let h1=document.createElement(\"h1\");\n// h1.innerText=\"hello brother\";\n// let parent=document.querySelector('#root');\n// parent.appendChild(h1);\n\n\n//React fragment\n//basically when we use like this\n/*ReactDom.render(\n    //     <div>\n    //         <h1>this is nikhil</h1>\n    //         <p>this is my mom</p>\n    //         <h2>this is my father</h2>\n    //     </div>,document.querySelector('#root')\n    \n    // )*/\n   // and check in console that code \n   // basically create another div inside the <div class=\"root\"> which is not preferrable when we use css but it doesn't occur while using as array\n\n\n\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAChCF,QAAQ,CAACG,MAAM,CACX,cACID,OAAA;EAAAE,QAAA,EAAI;AAAgB;EAAAC,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAI,CAAC,eACzBN,OAAA;EAAAE,QAAA,EAAI;AAAe;EAAAC,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAI,CAAC,eACxBN,OAAA;EAAAE,QAAA,EAAI;AAAa;EAAAC,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAI,CAAC,CACzB,EACDC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAElC,CAAC;;AAED;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}